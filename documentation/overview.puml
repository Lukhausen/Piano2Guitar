@startuml
!define DOMElement class

' Entry Point
class "Webpage" {
  Entry point and orchestrator.
  Initializes components and handles user interactions.
  Manages event flow and coordinates different parts of the application.
}

' MIDI Event Handler
class MIDIAccessManager {
  Manages MIDI devices and processes MIDI events.
  Sends MIDI note events to the Piano component.
}

' Virtual Piano
class Piano {
  Provides a virtual piano interface.
  Allows users to play notes.
  Interacts with ChordLibrary to find matching chords.
  +volumeOn()
  +volumeOff()
  +activateKey(note)
  +deactivateKey(note)
  +setRootNote()
}

' Chord Repository
class ChordLibrary {
  Stores predefined chords.
  Provides search functionality for chords.
  +searchChords(noteArray, rootNote, threshold)
  +getAllChords()
  +getChordByName(name)
}

' User Interaction Manager
class DragAndDropList {
  Manages drag-and-drop functionality for chords.
  Updates selected chord progression.
  +updateItems(newItems)
  +addSelectedItem(item)
  +clearSelectedList()
}

' Chord Progression Generator
class ProgressionGenerator {
  Generates and visualizes chord progressions.
  Uses ChordFactory for chord generation.
  Uses TabGenerator for visualizing progressions.
  +getProgression(type)
  +getProgressionHTML(classes, type)
  +getProgressionDynamicHTML(soundQuality)
  +setProgression(initialProgression)
}

' Diagram Creator
class TabGenerator {
  Creates visual chord diagrams.
  Generates SVG diagrams based on data from ProgressionGenerator.
  +generateChordSVG()
  +drawDiagramComponents(svg)
  +createSVGElement(tag, attributes)
}

' Chord Representation
class Chord {
  Represents a chord with root note, notes, name, and custom root.
  +Chord(rootNote, notes, name, customRoot)
}

' Drag-and-Drop Item
class DragAndDropItem extends Chord {
  Represents a chord in the drag-and-drop interface.
  +DragAndDropItem(chord, probability = -1)
}

' Chord Generation and Evaluation
class ChordFactory {
  Generates possible chord voicings.
  Evaluates playability and sound quality.
  +ChordFactory(notes, root, startWithRoot = true, tuning = STANDARD_TUNING)
  +calculateFingerPositions()
  +generateAllChordCombinations()
  +filterPlayableChords(allChords, rootNote, startWithRoot)
  +sortPlayableChordsByCombinedRating(soundWeight = 0)
}

' Chord Voicing Representation
class ChordVoicing {
  Represents and evaluates individual chord voicings.
  +ChordVoicing(voicing, barre, fingersUsed, barreSize, minAboveZero, chordFactoryNotes, chordFactoryRoot)
  +calculateChordSpacing()
  +calculateFingerPosition()
  +ratePlayability()
  +rateSoundQuality()
}

' Utilities and Constants
class Utils {
  Provides helper functions.
  +parseNotes(input)
  +removeDuplicateArrays(arrays)
}

class Constants {
  Stores static constants used across the application.
}

' Dependencies and Interactions
"Webpage" --> Piano : "Initializes and listens to events"
"Webpage" --> MIDIAccessManager : "Initializes and handles MIDI events"
"Webpage" --> ChordLibrary : "Initializes and searches chords"
"Webpage" --> DragAndDropList : "Initializes and manages drag/drop"
"Webpage" --> ProgressionGenerator : "Initializes and generates progressions"
"Webpage" --> TabGenerator : "Generates chord diagrams"
"Webpage" --> Constants : "Uses static constants"

MIDIAccessManager --> Piano : "Sends note events"
MIDIAccessManager --> MIDIAccessManager : "Searches MIDI Devices"
MIDIAccessManager --> DragAndDropList : "If Chord is detected, put Chord into selectedItems"
Piano --> DragAndDropList: "Update Displayed Chords"
ProgressionGenerator --> ChordFactory : "Generates chords"
ProgressionGenerator --> TabGenerator : "Generates diagrams"
ChordFactory --> ChordVoicing : "Creates voicings"

DragAndDropList --> ProgressionGenerator : "Updates Progression"

ChordLibrary --> DragAndDropList: "Provides List of Chords"
ChordLibrary --> DragAndDropItem : "Uses and Displays"
ChordVoicing --> Utils : "Uses helper functions"
ChordFactory --> Constants : "Uses constants"
TabGenerator --> Constants : "Uses constants"



DragAndDropList --> ChordLibrary : "Searches chords"
@enduml
