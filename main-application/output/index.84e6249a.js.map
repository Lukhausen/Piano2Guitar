{"mappings":"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","sources":["<anon>","script.js","drag-drop/script.js","piano/script.js","chord-library/script.js"],"sourcesContent":["class $8be3ff24c5619c64$var$DragAndDropList {\n    constructor(items, dropzoneId, itemsContainer, itemSearch, selectedItems, emptyMessage){\n        this.idCounter = 0;\n        this.items = items;\n        this.dropzoneId = dropzoneId;\n        this.emptyMessageContainer = document.getElementById(emptyMessage);\n        this.itemsContainer = document.getElementById(itemsContainer);\n        this.selectedItemsContainer = document.getElementById(selectedItems);\n        this.itemFilterInput = document.getElementById(itemSearch);\n        this.displayArray = document.createElement(\"div\");\n        this.displayArray.id = \"displayArray\";\n        document.body.appendChild(this.displayArray);\n        this.selectedItemsArray = [];\n        this.addEventListeners();\n        this.populateItemsList();\n        this.emptyMessage = \"Click on chords to add\"; // Placeholder for the input string\n        this.emptyMessageElement = document.createElement(\"div\");\n        this.emptyMessageElement.id = \"DragAndDrop-EmptyMessage\";\n        // Split the input message by spaces to get individual words\n        const words = this.emptyMessage.split(\" \");\n        // Create a base element to clone from\n        const baseElement = this.createItemElement(\"Sample Word\"); // Replace \"Sample Word\" with any sample text\n        baseElement.draggable = false;\n        baseElement.isSelectable = false;\n        // Loop through each word and append a cloned element to the emptyMessageElement\n        words.forEach((word)=>{\n            const clone = baseElement.cloneNode(true);\n            clone.innerHTML = word; // Set the innerHTML to the current word\n            this.emptyMessageElement.appendChild(clone);\n        });\n        this.selectedItemsContainer.appendChild(this.emptyMessageElement);\n    }\n    addEventListeners() {\n        window.addEventListener(\"dragover\", this.handleWindowDragOver.bind(this));\n        window.addEventListener(\"drop\", this.handleWindowDrop.bind(this));\n        this.selectedItemsContainer.addEventListener(\"dragover\", this.allowDrop.bind(this));\n        this.selectedItemsContainer.addEventListener(\"drop\", this.handleDropOnContainer.bind(this));\n        this.itemFilterInput.addEventListener(\"input\", this.filterItems.bind(this));\n    //this.itemsContainer.addEventListener('drop', this.handleDropOnItemList.bind(this));\n    }\n    handleWindowDragOver(e) {\n        e = e || event;\n        if (e.target.id !== this.dropzoneId) e.preventDefault();\n    }\n    handleWindowDrop(e) {\n        e = e || event;\n        if (e.target.id !== this.dropzoneId) e.preventDefault();\n    }\n    populateItemsList() {\n        this.items.forEach((item)=>{\n            this.itemsContainer.appendChild(this.createItemElement(item, true));\n        });\n    }\n    createItemElement(item, isSelectable = false) {\n        const itemElement = document.createElement(\"div\");\n        itemElement.textContent = item.name; // Assuming item is an object with 'name' and 'probability'\n        itemElement.className = \"dragDropItem\";\n        //itemElement.draggable = true;\n        itemElement.id = `dragDropItem-${this.idCounter++}`;\n        if (item.probability !== undefined) {\n            const probabilitySpan = document.createElement(\"span\");\n            probabilitySpan.textContent = `(${item.probability}%)`;\n            probabilitySpan.style.backgroundColor = this.getBackgroundColor(item.probability);\n            if (item.probability == 100) itemElement.style.boxShadow = \"0px 0px 10px 0px rgba(255,200,0)\";\n            itemElement.appendChild(probabilitySpan);\n        }\n        //itemElement.addEventListener('dragstart', this.handleDragStart.bind(this));\n        //itemElement.addEventListener('dragend', this.handleDragEnd.bind(this));\n        if (isSelectable) itemElement.addEventListener(\"click\", ()=>this.addSelectedItem(item));\n        return itemElement;\n    }\n    getBackgroundColor(probability) {\n        const startColor = [\n            221,\n            221,\n            221\n        ]; // #ddd\n        const endColor = [\n            63,\n            243,\n            51\n        ]; // #3f3\n        const winnerColor = [\n            255,\n            200,\n            0\n        ];\n        // Ensure probability is within the new range of 50 to 100\n        probability = Math.max(50, Math.min(100, probability));\n        // Transforming probability to start changing from 50 to 100\n        const scaledProbability = (probability - 50) / 50;\n        // Adjusting the probability scale logarithmically from 0.0 at probability 50 to 1.0 at probability 100\n        const adjustedProbability = Math.log10(1 + 9 * scaledProbability); // Logarithmic scale from 0 to 1\n        let blendedColor = startColor.map((component, index)=>{\n            return Math.round(component + (endColor[index] - component) * adjustedProbability);\n        });\n        if (probability == 100) blendedColor = winnerColor;\n        return `rgb(${blendedColor.join(\",\")})`;\n    }\n    createSelectedItemElement(item) {\n        const selectedItemElement = document.createElement(\"div\");\n        selectedItemElement.className = \"selected-dragDropItem dragDropItem\";\n        selectedItemElement.draggable = true;\n        selectedItemElement.id = `selected-dragDropItem-${this.idCounter++}`;\n        selectedItemElement.textContent = item.name; // Assuming item is an object with 'name'\n        selectedItemElement.addEventListener(\"dragstart\", this.handleDragStart.bind(this));\n        selectedItemElement.addEventListener(\"dragover\", this.handleDragOver.bind(this));\n        selectedItemElement.addEventListener(\"drop\", this.handleDropReorder.bind(this));\n        selectedItemElement.addEventListener(\"dragend\", this.handleDragEnd.bind(this));\n        selectedItemElement.addEventListener(\"dragleave\", this.handleDragLeave.bind(this));\n        selectedItemElement.addEventListener(\"click\", this.removeSelectedItem.bind(this));\n        return selectedItemElement;\n    }\n    removeSelectedItem(item) {\n        item.target.remove();\n        this.updateArray();\n    }\n    addSelectedItem(item) {\n        const selectedItemElement = this.createSelectedItemElement(item);\n        this.selectedItemsContainer.appendChild(selectedItemElement);\n        this.selectedItemsArray.push(item.name); // Store only the name in the array\n        this.updateDisplayArray();\n    }\n    ceateAndInsertElement(item) {\n        const element = this.createSelectedItemElement(item);\n        this.addSelectedItem(element);\n    }\n    updateItems(newItems) {\n        console.log(\"Updating Library...\");\n        // Clear existing items from the display and internal storage\n        this.clearList();\n        this.items = newItems;\n        // Repopulate the items list with new items\n        this.populateItemsList();\n    }\n    clearList() {\n        // Clear the internal items array\n        this.items = [];\n        // Remove all child elements of the items container\n        while(this.itemsContainer.firstChild)this.itemsContainer.removeChild(this.itemsContainer.firstChild);\n    }\n    handleDropOnItemList(event1) {\n        event1.preventDefault();\n        const droppedItemId = event1.dataTransfer.getData(\"text/plain\");\n        const droppedItemElement = document.getElementById(droppedItemId);\n        if (droppedItemElement && droppedItemElement.classList.contains(\"selected-dragDropItem\")) {\n            droppedItemElement.remove();\n            this.updateArray();\n        }\n    }\n    handleDragStart(event1) {\n        event1.dataTransfer.setData(\"text/plain\", event1.target.id);\n        if (event1.target.classList.contains(\"selected-dragDropItem\")) event1.target.classList.add(\"dragging\");\n    }\n    handleDragOver(event1) {\n        event1.preventDefault();\n        const targetElement = event1.target.closest(\".selected-dragDropItem\");\n        if (targetElement) targetElement.classList.add(\"over\");\n    }\n    handleDragLeave(event1) {\n        event1.preventDefault();\n        const targetElement = event1.target.closest(\".selected-dragDropItem\");\n        if (targetElement) targetElement.classList.remove(\"over\");\n    }\n    handleDropReorder(event1) {\n        event1.preventDefault();\n        const droppedItemId = event1.dataTransfer.getData(\"text/plain\");\n        const droppedItemElement = document.getElementById(droppedItemId);\n        if (!droppedItemElement) return;\n        const targetElement = event1.target.closest(\".selected-dragDropItem\");\n        if (targetElement) {\n            if (droppedItemElement.classList.contains(\"selected-dragDropItem\")) this.insertAtCorrectPosition(droppedItemElement, targetElement);\n        } else if (!droppedItemElement.classList.contains(\"selected-dragDropItem\")) {\n            const newClone = this.createSelectedItemElement(droppedItemElement.textContent);\n            this.selectedItemsContainer.appendChild(newClone);\n            this.selectedItemsArray.push(droppedItemElement.textContent);\n        } else this.selectedItemsContainer.appendChild(droppedItemElement);\n        this.updateDisplayArray();\n    }\n    handleDragEnd(event1) {\n        event1.target.classList.remove(\"dragging\");\n        const overItems = document.querySelectorAll(\".selected-dragDropItem\");\n        overItems.forEach((item)=>item.classList.remove(\"over\"));\n    }\n    allowDrop(event1) {\n        event1.preventDefault();\n    }\n    handleDropOnContainer(event1) {\n        event1.preventDefault();\n        const droppedItemId = event1.dataTransfer.getData(\"text/plain\");\n        const droppedItemElement = document.getElementById(droppedItemId);\n        if (droppedItemElement && !droppedItemElement.classList.contains(\"selected-dragDropItem\")) {\n            const item = {\n                name: droppedItemElement.textContent,\n                probability: undefined // Probability is not needed in selected items\n            };\n            const newClone = this.createSelectedItemElement(item);\n            this.selectedItemsContainer.appendChild(newClone);\n            this.selectedItemsArray.push(item.name);\n            this.updateDisplayArray();\n        }\n    }\n    insertAtCorrectPosition(droppedItemElement, targetElement) {\n        const droppedIndex = Array.from(this.selectedItemsContainer.children).indexOf(droppedItemElement);\n        const targetIndex = Array.from(this.selectedItemsContainer.children).indexOf(targetElement);\n        if (droppedIndex < targetIndex) targetElement.after(droppedItemElement);\n        else targetElement.before(droppedItemElement);\n        targetElement.classList.remove(\"over\");\n        this.updateArray();\n    }\n    updateArray() {\n        this.selectedItemsArray = Array.from(this.selectedItemsContainer.children).map((el)=>el.textContent);\n        this.updateDisplayArray();\n    }\n    updateDisplayArray() {\n        this.displayArray.textContent = `Selected Items: ${this.selectedItemsArray.join(\", \")}`;\n        console.log(this.selectedItemsArray.length);\n        if (this.selectedItemsArray.length == 0) {\n            if (!this.emptyMessageElement.parentNode) this.selectedItemsContainer.appendChild(this.emptyMessageElement);\n        } else this.emptyMessageElement.remove();\n    }\n    filterItems() {\n        const filterValue = this.itemFilterInput.value.toUpperCase();\n        const itemElements = this.itemsContainer.querySelectorAll(\".dragDropItem\");\n        itemElements.forEach((itemElement)=>{\n            const itemText = itemElement.textContent.toUpperCase();\n            itemElement.style.display = itemText.includes(filterValue) ? \"\" : \"none\";\n        });\n    }\n    getArray() {\n        return [\n            ...this.selectedItemsArray\n        ];\n    }\n}\nvar $8be3ff24c5619c64$export$2e2bcd8739ae039 = $8be3ff24c5619c64$var$DragAndDropList;\n\n\nclass $15f7e4e804ddc0ff$var$Piano {\n    constructor(containerSelector, options = {}){\n        this.container = document.querySelector(containerSelector);\n        this.updatePlayedNotesDebounced = this.debounce(this.updatePlayedNotes, 10);\n        this.octaves = options.octaves || 2;\n        this.playedNotes = [];\n        this.rootNote = null; // Add a property for the root note\n        this.layout = [\n            0,\n            1,\n            0,\n            1,\n            0,\n            0,\n            1,\n            0,\n            1,\n            0,\n            1,\n            0\n        ];\n        this.keysPerOctave = this.layout.length;\n        this.whiteKeyCount = this.layout.filter((x)=>x === 0).length;\n        this.whiteKeyWidth = 100 / (this.whiteKeyCount * this.octaves);\n        this.blackKeyWidth = this.whiteKeyWidth * 0.5829787234;\n        this.blackKeyHeight = 0.63;\n        this.totalKeys = this.octaves * this.keysPerOctave;\n        this.createPiano();\n        this.addKeyListeners();\n    }\n    createPiano() {\n        this.container.innerHTML = \"\"; // Clear existing piano keys\n        let whiteCounter = 0;\n        for(let index = 0; index < this.totalKeys; index++){\n            let key = document.createElement(\"div\");\n            key.setAttribute(\"data-note\", index);\n            if (this.layout[index % this.keysPerOctave] === 1) {\n                key.classList.add(\"key\", \"black\");\n                key.style.left = `${whiteCounter * this.whiteKeyWidth - this.blackKeyWidth / 2}%`;\n                key.style.width = `${this.blackKeyWidth}%`;\n                key.style.height = `${this.blackKeyHeight * 100}%`;\n                key.style.boxSizing = \"border-box\";\n                key.style.position = `absolute`;\n            } else {\n                key.classList.add(\"key\", \"white\");\n                key.style.boxSizing = \"border-box\";\n                key.style.width = `${this.whiteKeyWidth}%`;\n                whiteCounter++;\n            }\n            this.container.appendChild(key);\n        }\n    }\n    addKeyListeners() {\n        this.container.querySelectorAll(\".key\").forEach((key)=>{\n            key.addEventListener(\"click\", ()=>{\n                const note = key.getAttribute(\"data-note\");\n                if (this.rootNote !== note) {\n                    if (this.playedNotes.includes(note)) {\n                        this.playedNotes = this.playedNotes.filter((n)=>n !== note);\n                        key.classList.remove(\"selectedKey\");\n                        this.updatePlayedNotesDebounced();\n                    } else {\n                        this.playedNotes.push(note);\n                        key.classList.add(\"selectedKey\");\n                        this.updatePlayedNotesDebounced();\n                    }\n                } else this.setRootNote(note);\n            });\n            key.addEventListener(\"dblclick\", (event)=>{\n                event.stopPropagation(); // Prevent the click event from firing\n                const note = key.getAttribute(\"data-note\");\n                this.setRootNote(note);\n            });\n        });\n    }\n    debounce(func, delay) {\n        let timeoutId;\n        return function(...args) {\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(()=>{\n                func.apply(this, args);\n            }, delay);\n        };\n    }\n    setRootNote(note) {\n        // Update root note and ensure it's part of the played notes\n        if (this.rootNote === note) {\n            this.rootNote = null;\n            this.container.querySelector(`.key[data-note=\"${note}\"]`).classList.remove(\"rootNote\");\n        } else {\n            if (this.rootNote !== null) this.container.querySelector(`.key[data-note=\"${this.rootNote}\"]`).classList.remove(\"rootNote\");\n            this.rootNote = note;\n            if (!this.playedNotes.includes(note)) this.playedNotes.push(note);\n            this.container.querySelector(`.key[data-note=\"${note}\"]`).classList.add(\"rootNote\");\n            this.container.querySelector(`.key[data-note=\"${note}\"]`).classList.add(\"selectedKey\");\n        }\n        this.updatePlayedNotesDebounced();\n    }\n    // Create a Custom event to update the Other things\n    updatePlayedNotes() {\n        const event = new CustomEvent(\"notesChanged\", {\n            detail: {\n                notes: this.playedNotes,\n                rootNote: this.rootNote\n            }\n        });\n        console.log(\"Dispatching Note Change Event: \" + this.playedNotes + \" Root: \" + this.rootNote);\n        this.container.dispatchEvent(event);\n    }\n    clearPiano() {\n        this.playedNotes = []; // Clear the array of played notes\n        this.rootNote = null; // Clear the root note\n        this.container.querySelectorAll(\".key.selectedKey\").forEach((key)=>{\n            key.classList.remove(\"selectedKey\");\n        });\n        this.container.querySelectorAll(\".key.rootNote\").forEach((key)=>{\n            key.classList.remove(\"rootNote\");\n        });\n        this.updatePlayedNotes();\n    }\n    setOctaves(newOctaves) {\n        if (newOctaves !== this.octaves) {\n            this.octaves = newOctaves;\n            this.totalKeys = this.octaves * this.keysPerOctave;\n            this.whiteKeyWidth = 100 / (this.whiteKeyCount * this.octaves);\n            this.blackKeyWidth = this.whiteKeyWidth * 0.5829787234;\n            this.clearPiano();\n            this.createPiano();\n            this.addKeyListeners();\n        }\n    }\n}\nvar $15f7e4e804ddc0ff$export$2e2bcd8739ae039 = $15f7e4e804ddc0ff$var$Piano;\n\n\nclass $ba3f5238df4b6dab$export$3aefe856cf647baf {\n    constructor(rootNote, notes, name, customRoot){\n        this.rootNote = rootNote; // Integer 0-11, where 0 = C, 1 = C#, 2 = D, etc.\n        this.notes = notes; // Array of integers representing notes of the chord\n        this.name = name; // String representing the full name of the chord, e.g., \"Gm\", \"Asus4\"\n        this.customRoot = customRoot;\n        console.log(\"Registered Note: \" + this.name + \" Root: \" + this.rootNote + \" Notes: \" + this.notes);\n    }\n}\nclass $ba3f5238df4b6dab$export$b629fc3c71676d49 {\n    constructor(){\n        this.chords = [];\n        this.noteNames = [\n            \"C\",\n            \"C#\",\n            \"D\",\n            \"D#\",\n            \"E\",\n            \"F\",\n            \"F#\",\n            \"G\",\n            \"G#\",\n            \"A\",\n            \"A#\",\n            \"B\"\n        ];\n        this.chordStructures = {\n            \"\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ]\n            },\n            \"m\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ]\n            },\n            \"7\": {\n                notes: [\n                    0,\n                    4,\n                    7,\n                    10\n                ]\n            },\n            \"M7\": {\n                notes: [\n                    0,\n                    4,\n                    7,\n                    11\n                ]\n            },\n            \"m7\": {\n                notes: [\n                    0,\n                    3,\n                    7,\n                    10\n                ]\n            },\n            \"mM7\": {\n                notes: [\n                    0,\n                    3,\n                    7,\n                    11\n                ]\n            },\n            \"sus2\": {\n                notes: [\n                    0,\n                    2,\n                    7\n                ]\n            },\n            \"sus4\": {\n                notes: [\n                    0,\n                    5,\n                    7\n                ]\n            },\n            \"dim\": {\n                notes: [\n                    0,\n                    3,\n                    6\n                ]\n            },\n            \"aug\": {\n                notes: [\n                    0,\n                    4,\n                    8\n                ]\n            },\n            \"9\": {\n                notes: [\n                    0,\n                    4,\n                    7,\n                    10,\n                    14\n                ]\n            },\n            \"M9\": {\n                notes: [\n                    0,\n                    4,\n                    7,\n                    11,\n                    14\n                ]\n            },\n            \"m9\": {\n                notes: [\n                    0,\n                    3,\n                    7,\n                    10,\n                    14\n                ]\n            },\n            \"11\": {\n                notes: [\n                    0,\n                    4,\n                    7,\n                    10,\n                    14,\n                    17\n                ]\n            },\n            \"13\": {\n                notes: [\n                    0,\n                    4,\n                    7,\n                    10,\n                    14,\n                    17,\n                    21\n                ]\n            },\n            \"add9\": {\n                notes: [\n                    0,\n                    2,\n                    4,\n                    7\n                ]\n            },\n            \"m6\": {\n                notes: [\n                    0,\n                    3,\n                    7,\n                    9\n                ]\n            },\n            \"6\": {\n                notes: [\n                    0,\n                    4,\n                    7,\n                    9\n                ]\n            },\n            \"5\": {\n                notes: [\n                    0,\n                    7\n                ]\n            },\n            \"6/9\": {\n                notes: [\n                    0,\n                    4,\n                    7,\n                    9,\n                    14\n                ]\n            },\n            \"m11\": {\n                notes: [\n                    0,\n                    3,\n                    7,\n                    10,\n                    17\n                ]\n            },\n            \"M7#11\": {\n                notes: [\n                    0,\n                    4,\n                    7,\n                    11,\n                    18\n                ]\n            },\n            \"m7b5\": {\n                notes: [\n                    0,\n                    3,\n                    6,\n                    10\n                ]\n            },\n            \"/C\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ],\n                root: 0\n            },\n            \"/Cm\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ],\n                root: 0\n            },\n            \"/C#\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ],\n                root: 1\n            },\n            \"/C#m\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ],\n                root: 1\n            },\n            \"/D\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ],\n                root: 2\n            },\n            \"/Dm\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ],\n                root: 2\n            },\n            \"/D#\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ],\n                root: 3\n            },\n            \"/D#m\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ],\n                root: 3\n            },\n            \"/E\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ],\n                root: 4\n            },\n            \"/Em\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ],\n                root: 4\n            },\n            \"/F\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ],\n                root: 5\n            },\n            \"/Fm\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ],\n                root: 5\n            },\n            \"/F#\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ],\n                root: 6\n            },\n            \"/F#m\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ],\n                root: 6\n            },\n            \"/G\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ],\n                root: 7\n            },\n            \"/Gm\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ],\n                root: 7\n            },\n            \"/G#\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ],\n                root: 8\n            },\n            \"/G#m\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ],\n                root: 8\n            },\n            \"/A\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ],\n                root: 9\n            },\n            \"/Am\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ],\n                root: 9\n            },\n            \"/A#\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ],\n                root: 10\n            },\n            \"/A#m\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ],\n                root: 10\n            },\n            \"/B\": {\n                notes: [\n                    0,\n                    4,\n                    7\n                ],\n                root: 11\n            },\n            \"/Bm\": {\n                notes: [\n                    0,\n                    3,\n                    7\n                ],\n                root: 11\n            } // B Minor\n        };\n        this.generateChords();\n    }\n    generateChords() {\n        Object.entries(this.chordStructures).forEach(([suffix, structure])=>{\n            for(let i = 0; i < 12; i++){\n                let rootNote = i;\n                let customRoot = false;\n                let notes = structure.notes.map((interval)=>(i + interval) % 12);\n                const chordName = `${this.noteNames[i]}${suffix}`;\n                if (structure.root !== undefined) {\n                    //Filter Dumb Chord Like C/C D/D\n                    if (structure.root == rootNote) continue;\n                    rootNote = structure.root;\n                    customRoot = true;\n                    notes.push(rootNote);\n                }\n                this.chords.push(new $ba3f5238df4b6dab$export$3aefe856cf647baf(rootNote, notes, chordName, customRoot));\n            }\n        });\n    }\n    searchChords(noteArray, rootNote, threshold = 50) {\n        console.log(\"Searching Chords...\");\n        const results = [];\n        noteArray = noteArray.map((note)=>note % 12); // Normalize notes to be within octave\n        if (rootNote) rootNote = rootNote % 12;\n        this.chords.forEach((chord)=>{\n            let chordNotes = [\n                ...chord.notes\n            ];\n            console.log(\"Comparing to: \" + chord.name);\n            //Add the Root note to the Chords For Cases like A/D\n            const inputNotesSet = new Set(noteArray);\n            console.log(\"Input Notes Set: \", inputNotesSet);\n            const commonNotes = new Set([\n                ...chordNotes\n            ].filter((note)=>inputNotesSet.has(note)));\n            console.log(\"Common Notes with Chord: \", commonNotes);\n            const totalUniqueNotes = new Set([\n                ...chordNotes,\n                ...noteArray\n            ]);\n            console.log(\"Total Unique Notes: \", totalUniqueNotes);\n            let matchPercentage = commonNotes.size / totalUniqueNotes.size * 100;\n            console.log(\"Searched Root: \" + rootNote + \" Presen Root: \" + chord.rootNote);\n            // Adjusting match percentage based on root note comparison\n            if (rootNote !== null) {\n                if (chord.rootNote == rootNote) console.log(\"Matching Root for: \" + chord.name + \" Root: \" + chord.rootNote + \" Notes: \" + chordNotes);\n                else {\n                    // Penalize the match percentage slightly if root notes don't match\n                    matchPercentage *= 0.85; // Penalize by 10%\n                    console.log(\"Panelized for not matching Root\");\n                }\n            } else //If a Custom Root in the CHord Details is specified but the user hasnt put a custom root\n            if (chord.customRoot == true) {\n                matchPercentage *= 0.85; // Penalize by 10%\n                console.log(\"Panelized For Havinng Specific when it shouldnt\");\n            }\n            if (matchPercentage >= threshold) results.push({\n                name: chord.name,\n                probability: parseFloat(matchPercentage.toFixed(2))\n            });\n        });\n        // Sort results by probability in descending order\n        return results.sort((a, b)=>b.probability - a.probability);\n    }\n    getAllChords() {\n        // Return all chord names in a simplified object format\n        return this.chords.map((chord)=>({\n                name: chord.name\n            }));\n    }\n    getChordByName(name) {\n        const chord = this.chords.find((chord)=>chord.name === name);\n        if (chord) {\n            console.log(\"Chord found:\", chord);\n            return chord;\n        } else {\n            console.log(\"No chord found with the name:\", name);\n            return null;\n        }\n    }\n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    // Function to calculate the number of octaves based on screen width\n    function calculateOctaves() {\n        const screenWidth = window.innerWidth;\n        console.log(Math.sqrt(screenWidth));\n        const maxOctaves = 3; // Base octaves to start with\n        const extraOctaves = Math.ceil(Math.sqrt(screenWidth) / 25);\n        return Math.min(maxOctaves, extraOctaves);\n    }\n    // Create a new Piano instance with dynamic number of octaves\n    const myPiano = new (0, $15f7e4e804ddc0ff$export$2e2bcd8739ae039)(\".pianoContainer\", {\n        octaves: calculateOctaves()\n    });\n    // Get All Chords From the Libaray\n    const chordLibrary = new (0, $ba3f5238df4b6dab$export$b629fc3c71676d49);\n    // Create the Search and Drag and Drop\n    const allChordLibraryItems = chordLibrary.getAllChords();\n    const dropzone = \"selectedItems\";\n    const itemsContainer = \"itemsContainer\";\n    const itemSearch = \"itemSearch\";\n    const selectedItems = \"selectedItems\";\n    const emptyMessageContainer = \"emptyMessageContainer\";\n    const dragAndDropList = new (0, $8be3ff24c5619c64$export$2e2bcd8739ae039)(allChordLibraryItems, dropzone, itemsContainer, itemSearch, selectedItems, emptyMessageContainer);\n    window.clearPiano = function() {\n        document.getElementById(\"itemSearch\").value = \"\";\n        myPiano.clearPiano();\n        console.log(\"Piano cleared\");\n    };\n    // Handle window resize to adjust the number of octaves dynamically\n    window.onresize = function() {\n        const newOctaves = calculateOctaves();\n        myPiano.setOctaves(newOctaves); // Assuming there's a method to update the octaves dynamically\n    };\n    document.querySelector(\".pianoContainer\").addEventListener(\"notesChanged\", (e)=>{\n        console.log(\"Piano notes changed:\", e.detail.notes, e.detail.rootNote);\n        let items;\n        if (e.detail.notes.length > 0) {\n            console.log(\"Reviced notesChanged Event: \" + e.detail.notes + \" Root: \" + e.detail.rootNote);\n            items = chordLibrary.searchChords(e.detail.notes, e.detail.rootNote, 50);\n        } else items = allChordLibraryItems;\n        //dragAndDropList.ceateAndInsertElement(e.detail.notes)\n        dragAndDropList.updateItems(items);\n    // Additional logic to handle the change in notes\n    });\n});\n\n\n//# sourceMappingURL=index.84e6249a.js.map\n","import DragAndDropList from './drag-drop/script.js';\r\nimport Piano from './piano/script.js';\r\nimport { Chord, ChordLibrary } from \"./chord-library/script.js\"\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Function to calculate the number of octaves based on screen width\r\n    function calculateOctaves() {\r\n        const screenWidth = window.innerWidth;\r\n        console.log((Math.sqrt(screenWidth)))\r\n        const maxOctaves = 3; // Base octaves to start with\r\n        const extraOctaves = Math.ceil((Math.sqrt(screenWidth)) / 25);\r\n        return Math.min(maxOctaves, extraOctaves);\r\n    }\r\n\r\n    // Create a new Piano instance with dynamic number of octaves\r\n    const myPiano = new Piano('.pianoContainer', { octaves: calculateOctaves() });\r\n\r\n\r\n    // Get All Chords From the Libaray\r\n    const chordLibrary = new ChordLibrary\r\n\r\n    // Create the Search and Drag and Drop\r\n\r\n    const allChordLibraryItems = chordLibrary.getAllChords()\r\n\r\n\r\n    const dropzone = 'selectedItems';\r\n    const itemsContainer = \"itemsContainer\";\r\n    const itemSearch = \"itemSearch\";\r\n    const selectedItems = \"selectedItems\";\r\n    const emptyMessageContainer = \"emptyMessageContainer\";\r\n    const dragAndDropList = new DragAndDropList(allChordLibraryItems, dropzone, itemsContainer, itemSearch, selectedItems, emptyMessageContainer);\r\n\r\n    window.clearPiano = function () {\r\n        document.getElementById(\"itemSearch\").value=\"\"\r\n        myPiano.clearPiano();\r\n        console.log(\"Piano cleared\");\r\n    };\r\n\r\n    // Handle window resize to adjust the number of octaves dynamically\r\n    window.onresize = function () {\r\n        const newOctaves = calculateOctaves();\r\n        myPiano.setOctaves(newOctaves); // Assuming there's a method to update the octaves dynamically\r\n    };\r\n\r\n\r\n    document.querySelector('.pianoContainer').addEventListener('notesChanged', (e) => {\r\n        console.log('Piano notes changed:', e.detail.notes, e.detail.rootNote);\r\n        let items\r\n        if (e.detail.notes.length > 0) {\r\n            console.log(\"Reviced notesChanged Event: \"+e.detail.notes+ \" Root: \"+e.detail.rootNote)\r\n            items = chordLibrary.searchChords(e.detail.notes, e.detail.rootNote, 50)\r\n        } else{\r\n            items = allChordLibraryItems\r\n        }\r\n        //dragAndDropList.ceateAndInsertElement(e.detail.notes)\r\n        dragAndDropList.updateItems(items)\r\n        // Additional logic to handle the change in notes\r\n    });\r\n});\r\n","class DragAndDropList {\r\n    constructor(items, dropzoneId, itemsContainer, itemSearch, selectedItems, emptyMessage) {\r\n        this.idCounter = 0;\r\n        this.items = items;\r\n        this.dropzoneId = dropzoneId;\r\n\r\n        this.emptyMessageContainer = document.getElementById(emptyMessage);\r\n        this.itemsContainer = document.getElementById(itemsContainer);\r\n        this.selectedItemsContainer = document.getElementById(selectedItems);\r\n        this.itemFilterInput = document.getElementById(itemSearch);\r\n        this.displayArray = document.createElement('div');\r\n        this.displayArray.id = 'displayArray';\r\n        document.body.appendChild(this.displayArray);\r\n        this.selectedItemsArray = [];\r\n\r\n        this.addEventListeners();\r\n        this.populateItemsList();\r\n\r\n        this.emptyMessage = \"Click on chords to add\"; // Placeholder for the input string\r\n        this.emptyMessageElement = document.createElement('div');\r\n        this.emptyMessageElement.id = \"DragAndDrop-EmptyMessage\";\r\n\r\n        // Split the input message by spaces to get individual words\r\n        const words = this.emptyMessage.split(' ');\r\n\r\n        // Create a base element to clone from\r\n        const baseElement = this.createItemElement(\"Sample Word\"); // Replace \"Sample Word\" with any sample text\r\n        baseElement.draggable = false;\r\n        baseElement.isSelectable = false;\r\n\r\n        // Loop through each word and append a cloned element to the emptyMessageElement\r\n        words.forEach(word => {\r\n            const clone = baseElement.cloneNode(true);\r\n            clone.innerHTML = word; // Set the innerHTML to the current word\r\n            this.emptyMessageElement.appendChild(clone);\r\n        });\r\n\r\n        this.selectedItemsContainer.appendChild(this.emptyMessageElement);\r\n\r\n\r\n    }\r\n\r\n    addEventListeners() {\r\n        window.addEventListener('dragover', this.handleWindowDragOver.bind(this));\r\n        window.addEventListener('drop', this.handleWindowDrop.bind(this));\r\n        this.selectedItemsContainer.addEventListener('dragover', this.allowDrop.bind(this));\r\n        this.selectedItemsContainer.addEventListener('drop', this.handleDropOnContainer.bind(this));\r\n        this.itemFilterInput.addEventListener('input', this.filterItems.bind(this));\r\n        //this.itemsContainer.addEventListener('drop', this.handleDropOnItemList.bind(this));\r\n    }\r\n\r\n    handleWindowDragOver(e) {\r\n        e = e || event;\r\n        if (e.target.id !== this.dropzoneId) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    handleWindowDrop(e) {\r\n        e = e || event;\r\n        if (e.target.id !== this.dropzoneId) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    populateItemsList() {\r\n        this.items.forEach(item => {\r\n            this.itemsContainer.appendChild(this.createItemElement(item, true));\r\n        });\r\n    }\r\n\r\n    createItemElement(item, isSelectable = false) {\r\n        const itemElement = document.createElement('div');\r\n        itemElement.textContent = item.name; // Assuming item is an object with 'name' and 'probability'\r\n        itemElement.className = 'dragDropItem';\r\n        //itemElement.draggable = true;\r\n        itemElement.id = `dragDropItem-${this.idCounter++}`;\r\n\r\n        if (item.probability !== undefined) {\r\n            const probabilitySpan = document.createElement('span');\r\n            probabilitySpan.textContent = `(${item.probability}%)`;\r\n            probabilitySpan.style.backgroundColor = this.getBackgroundColor(item.probability);\r\n            if (item.probability == 100){\r\n                itemElement.style.boxShadow = '0px 0px 10px 0px rgba(255,200,0)';\r\n            }\r\n\r\n            itemElement.appendChild(probabilitySpan);\r\n        }\r\n\r\n        //itemElement.addEventListener('dragstart', this.handleDragStart.bind(this));\r\n        //itemElement.addEventListener('dragend', this.handleDragEnd.bind(this));\r\n        if (isSelectable) {\r\n            itemElement.addEventListener('click', () => this.addSelectedItem(item));\r\n        }\r\n        return itemElement;\r\n    }\r\n\r\n    getBackgroundColor(probability) {\r\n        const startColor = [221, 221, 221]; // #ddd\r\n        const endColor = [63, 243, 51]; // #3f3\r\n        const winnerColor = [255,200,0]\r\n    \r\n        // Ensure probability is within the new range of 50 to 100\r\n        probability = Math.max(50, Math.min(100, probability));\r\n        \r\n        // Transforming probability to start changing from 50 to 100\r\n        const scaledProbability = (probability - 50) / 50;\r\n    \r\n        // Adjusting the probability scale logarithmically from 0.0 at probability 50 to 1.0 at probability 100\r\n        const adjustedProbability = Math.log10(1 + 9 * scaledProbability); // Logarithmic scale from 0 to 1\r\n    \r\n        let blendedColor = startColor.map((component, index) => {\r\n            return Math.round(component + (endColor[index] - component) * adjustedProbability);\r\n        });\r\n        if (probability == 100){\r\n            blendedColor = winnerColor\r\n        }\r\n        return `rgb(${blendedColor.join(',')})`;\r\n    }\r\n\r\n    createSelectedItemElement(item) {\r\n        const selectedItemElement = document.createElement('div');\r\n        selectedItemElement.className = 'selected-dragDropItem dragDropItem';\r\n        selectedItemElement.draggable = true;\r\n        selectedItemElement.id = `selected-dragDropItem-${this.idCounter++}`;\r\n        selectedItemElement.textContent = item.name; // Assuming item is an object with 'name'\r\n        selectedItemElement.addEventListener('dragstart', this.handleDragStart.bind(this));\r\n        selectedItemElement.addEventListener('dragover', this.handleDragOver.bind(this));\r\n        selectedItemElement.addEventListener('drop', this.handleDropReorder.bind(this));\r\n        selectedItemElement.addEventListener('dragend', this.handleDragEnd.bind(this));\r\n        selectedItemElement.addEventListener('dragleave', this.handleDragLeave.bind(this));\r\n        selectedItemElement.addEventListener('click', this.removeSelectedItem.bind(this));\r\n        return selectedItemElement;\r\n    }\r\n\r\n    removeSelectedItem(item) {\r\n        item.target.remove();\r\n        this.updateArray();\r\n    }\r\n\r\n    addSelectedItem(item) {\r\n        const selectedItemElement = this.createSelectedItemElement(item);\r\n        this.selectedItemsContainer.appendChild(selectedItemElement);\r\n        this.selectedItemsArray.push(item.name); // Store only the name in the array\r\n        this.updateDisplayArray();\r\n    }\r\n\r\n    ceateAndInsertElement(item) {\r\n        const element = this.createSelectedItemElement(item)\r\n        this.addSelectedItem(element)\r\n    }\r\n    updateItems(newItems) {\r\n        console.log(\"Updating Library...\")\r\n        // Clear existing items from the display and internal storage\r\n        this.clearList()\r\n        this.items = newItems;\r\n\r\n        // Repopulate the items list with new items\r\n        this.populateItemsList();\r\n    }\r\n\r\n    clearList() {\r\n        // Clear the internal items array\r\n        this.items = [];\r\n\r\n        // Remove all child elements of the items container\r\n        while (this.itemsContainer.firstChild) {\r\n            this.itemsContainer.removeChild(this.itemsContainer.firstChild);\r\n        }\r\n    }\r\n\r\n\r\n    handleDropOnItemList(event) {\r\n        event.preventDefault();\r\n        const droppedItemId = event.dataTransfer.getData('text/plain');\r\n        const droppedItemElement = document.getElementById(droppedItemId);\r\n\r\n        if (droppedItemElement && droppedItemElement.classList.contains('selected-dragDropItem')) {\r\n            droppedItemElement.remove();\r\n            this.updateArray();\r\n        }\r\n    }\r\n\r\n    handleDragStart(event) {\r\n        event.dataTransfer.setData('text/plain', event.target.id);\r\n\r\n        if (event.target.classList.contains('selected-dragDropItem')) {\r\n            event.target.classList.add('dragging');\r\n        }\r\n    }\r\n\r\n    handleDragOver(event) {\r\n        event.preventDefault();\r\n        const targetElement = event.target.closest('.selected-dragDropItem');\r\n        if (targetElement) {\r\n            targetElement.classList.add('over');\r\n        }\r\n    }\r\n\r\n    handleDragLeave(event) {\r\n        event.preventDefault();\r\n        const targetElement = event.target.closest('.selected-dragDropItem');\r\n        if (targetElement) {\r\n            targetElement.classList.remove('over');\r\n        }\r\n    }\r\n\r\n    handleDropReorder(event) {\r\n        event.preventDefault();\r\n        const droppedItemId = event.dataTransfer.getData('text/plain');\r\n        const droppedItemElement = document.getElementById(droppedItemId);\r\n        if (!droppedItemElement) return;\r\n\r\n        const targetElement = event.target.closest('.selected-dragDropItem');\r\n        if (targetElement) {\r\n            if (droppedItemElement.classList.contains('selected-dragDropItem')) {\r\n                this.insertAtCorrectPosition(droppedItemElement, targetElement);\r\n            }\r\n        } else {\r\n            if (!droppedItemElement.classList.contains('selected-dragDropItem')) {\r\n                const newClone = this.createSelectedItemElement(droppedItemElement.textContent);\r\n                this.selectedItemsContainer.appendChild(newClone);\r\n                this.selectedItemsArray.push(droppedItemElement.textContent);\r\n            } else {\r\n                this.selectedItemsContainer.appendChild(droppedItemElement);\r\n            }\r\n        }\r\n        this.updateDisplayArray();\r\n    }\r\n\r\n    handleDragEnd(event) {\r\n        event.target.classList.remove('dragging');\r\n        const overItems = document.querySelectorAll('.selected-dragDropItem');\r\n        overItems.forEach(item => item.classList.remove('over'));\r\n    }\r\n\r\n    allowDrop(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleDropOnContainer(event) {\r\n        event.preventDefault();\r\n        const droppedItemId = event.dataTransfer.getData('text/plain');\r\n        const droppedItemElement = document.getElementById(droppedItemId);\r\n\r\n        if (droppedItemElement && !droppedItemElement.classList.contains('selected-dragDropItem')) {\r\n            const item = {\r\n                name: droppedItemElement.textContent,\r\n                probability: undefined // Probability is not needed in selected items\r\n            };\r\n            const newClone = this.createSelectedItemElement(item);\r\n            this.selectedItemsContainer.appendChild(newClone);\r\n            this.selectedItemsArray.push(item.name);\r\n            this.updateDisplayArray();\r\n        }\r\n    }\r\n\r\n    insertAtCorrectPosition(droppedItemElement, targetElement) {\r\n        const droppedIndex = Array.from(this.selectedItemsContainer.children).indexOf(droppedItemElement);\r\n        const targetIndex = Array.from(this.selectedItemsContainer.children).indexOf(targetElement);\r\n\r\n        if (droppedIndex < targetIndex) {\r\n            targetElement.after(droppedItemElement);\r\n        } else {\r\n            targetElement.before(droppedItemElement);\r\n        }\r\n        targetElement.classList.remove('over');\r\n        this.updateArray();\r\n    }\r\n\r\n    updateArray() {\r\n        this.selectedItemsArray = Array.from(this.selectedItemsContainer.children).map(el => el.textContent);\r\n        this.updateDisplayArray();\r\n    }\r\n\r\n    updateDisplayArray() {\r\n        this.displayArray.textContent = `Selected Items: ${this.selectedItemsArray.join(', ')}`;\r\n        console.log(this.selectedItemsArray.length);\r\n        if (this.selectedItemsArray.length == 0) {\r\n            if (!this.emptyMessageElement.parentNode) {\r\n                this.selectedItemsContainer.appendChild(this.emptyMessageElement);\r\n            }\r\n        } else {\r\n            this.emptyMessageElement.remove();\r\n        }\r\n    }\r\n\r\n    filterItems() {\r\n        const filterValue = this.itemFilterInput.value.toUpperCase();\r\n        const itemElements = this.itemsContainer.querySelectorAll('.dragDropItem');\r\n        itemElements.forEach(itemElement => {\r\n            const itemText = itemElement.textContent.toUpperCase();\r\n            itemElement.style.display = itemText.includes(filterValue) ? '' : 'none';\r\n        });\r\n    }\r\n\r\n    getArray() {\r\n        return [...this.selectedItemsArray];\r\n    }\r\n}\r\n\r\nexport default DragAndDropList ","class Piano {\r\n    constructor(containerSelector, options = {}) {\r\n        this.container = document.querySelector(containerSelector);\r\n        this.updatePlayedNotesDebounced = this.debounce(this.updatePlayedNotes, 10);\r\n\r\n        this.octaves = options.octaves || 2;\r\n        this.playedNotes = [];\r\n        this.rootNote = null; // Add a property for the root note\r\n\r\n        this.layout = [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0];\r\n        this.keysPerOctave = this.layout.length;\r\n        this.whiteKeyCount = this.layout.filter(x => x === 0).length;\r\n        this.whiteKeyWidth = 100 / (this.whiteKeyCount * this.octaves);\r\n        this.blackKeyWidth = this.whiteKeyWidth * 0.5829787234;\r\n        this.blackKeyHeight = 0.63;\r\n        this.totalKeys = this.octaves * this.keysPerOctave;\r\n\r\n\r\n        this.createPiano();\r\n        this.addKeyListeners();\r\n    }\r\n\r\n\r\n\r\n    createPiano() {\r\n        this.container.innerHTML = ''; // Clear existing piano keys\r\n        let whiteCounter = 0;\r\n\r\n        for (let index = 0; index < this.totalKeys; index++) {\r\n            let key = document.createElement(\"div\");\r\n            key.setAttribute('data-note', index);\r\n            if (this.layout[index % this.keysPerOctave] === 1) {\r\n                key.classList.add(\"key\", \"black\");\r\n                key.style.left = `${(whiteCounter * this.whiteKeyWidth) - (this.blackKeyWidth / 2)}%`;\r\n                key.style.width = `${this.blackKeyWidth}%`;\r\n                key.style.height = `${this.blackKeyHeight * 100}%`;\r\n                key.style.boxSizing = \"border-box\";\r\n                key.style.position = `absolute`;\r\n            } else {\r\n                key.classList.add(\"key\", \"white\");\r\n                key.style.boxSizing = \"border-box\";\r\n                key.style.width = `${this.whiteKeyWidth}%`;\r\n                whiteCounter++;\r\n            }\r\n            this.container.appendChild(key);\r\n        }\r\n    }\r\n\r\n    addKeyListeners() {\r\n        this.container.querySelectorAll('.key').forEach(key => {\r\n            key.addEventListener('click', () => {\r\n                const note = key.getAttribute('data-note');\r\n                if (this.rootNote !== note) { // Check if it's not the current root note\r\n                    if (this.playedNotes.includes(note)) {\r\n                        this.playedNotes = this.playedNotes.filter(n => n !== note);\r\n                        key.classList.remove(\"selectedKey\");\r\n                        this.updatePlayedNotesDebounced();\r\n                    } else {\r\n                        this.playedNotes.push(note);\r\n                        key.classList.add(\"selectedKey\");\r\n                        this.updatePlayedNotesDebounced();\r\n                    }\r\n                } else {\r\n                    this.setRootNote(note);\r\n                }\r\n\r\n            });\r\n\r\n            key.addEventListener('dblclick', (event) => {\r\n                event.stopPropagation(); // Prevent the click event from firing\r\n                const note = key.getAttribute('data-note');\r\n                this.setRootNote(note);\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    debounce(func, delay) {\r\n        let timeoutId;\r\n        return function (...args) {\r\n            clearTimeout(timeoutId);\r\n            timeoutId = setTimeout(() => {\r\n                func.apply(this, args);\r\n            }, delay);\r\n        };\r\n    }\r\n\r\n    setRootNote(note) {\r\n        // Update root note and ensure it's part of the played notes\r\n        if (this.rootNote === note) {\r\n            this.rootNote = null;\r\n            this.container.querySelector(`.key[data-note=\"${note}\"]`).classList.remove('rootNote');\r\n        } else {\r\n            if (this.rootNote !== null) {\r\n                this.container.querySelector(`.key[data-note=\"${this.rootNote}\"]`).classList.remove('rootNote');\r\n            }\r\n            this.rootNote = note;\r\n            if (!this.playedNotes.includes(note)) {\r\n                this.playedNotes.push(note);\r\n            }\r\n            this.container.querySelector(`.key[data-note=\"${note}\"]`).classList.add('rootNote');\r\n            this.container.querySelector(`.key[data-note=\"${note}\"]`).classList.add('selectedKey');\r\n        }\r\n        this.updatePlayedNotesDebounced();\r\n    }\r\n\r\n    // Create a Custom event to update the Other things\r\n    updatePlayedNotes() {\r\n        const event = new CustomEvent('notesChanged', { detail: { notes: this.playedNotes, rootNote: this.rootNote } });\r\n        console.log(\"Dispatching Note Change Event: \" + this.playedNotes + \" Root: \" + this.rootNote)\r\n        this.container.dispatchEvent(event);\r\n    }\r\n\r\n\r\n\r\n    clearPiano() {\r\n        this.playedNotes = []; // Clear the array of played notes\r\n        this.rootNote = null; // Clear the root note\r\n        this.container.querySelectorAll('.key.selectedKey').forEach(key => {\r\n            key.classList.remove(\"selectedKey\");\r\n        });\r\n        this.container.querySelectorAll('.key.rootNote').forEach(key => {\r\n            key.classList.remove(\"rootNote\");\r\n        });\r\n        this.updatePlayedNotes();\r\n    }\r\n\r\n    setOctaves(newOctaves) {\r\n        if (newOctaves !== this.octaves) {\r\n            this.octaves = newOctaves;\r\n            this.totalKeys = this.octaves * this.keysPerOctave;\r\n            this.whiteKeyWidth = 100 / (this.whiteKeyCount * this.octaves);\r\n            this.blackKeyWidth = this.whiteKeyWidth * 0.5829787234;\r\n            this.clearPiano();\r\n            this.createPiano();\r\n            this.addKeyListeners();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Piano;\r\n","class Chord {\r\n    constructor(rootNote, notes, name, customRoot) {\r\n        this.rootNote = rootNote; // Integer 0-11, where 0 = C, 1 = C#, 2 = D, etc.\r\n        this.notes = notes; // Array of integers representing notes of the chord\r\n        this.name = name; // String representing the full name of the chord, e.g., \"Gm\", \"Asus4\"\r\n        this.customRoot = customRoot\r\n        console.log(\"Registered Note: \" + this.name + \" Root: \" + this.rootNote + \" Notes: \" + this.notes)\r\n    }\r\n}\r\n\r\nclass ChordLibrary {\r\n    constructor() {\r\n        this.chords = [];\r\n        this.noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\r\n\r\n        this.chordStructures = {\r\n            '': { notes: [0, 4, 7] }, // Major\r\n            'm': { notes: [0, 3, 7] }, // Minor\r\n            '7': { notes: [0, 4, 7, 10] }, // Dominant 7th\r\n            'M7': { notes: [0, 4, 7, 11] }, // Major 7th\r\n            'm7': { notes: [0, 3, 7, 10] }, // Minor 7th\r\n            'mM7': { notes: [0, 3, 7, 11] }, // Minor Major 7th\r\n            'sus2': { notes: [0, 2, 7] }, // Suspended 2nd\r\n            'sus4': { notes: [0, 5, 7] }, // Suspended 4th\r\n            'dim': { notes: [0, 3, 6] }, // Diminished\r\n            'aug': { notes: [0, 4, 8] }, // Augmented\r\n            '9': { notes: [0, 4, 7, 10, 14] }, // Dominant 9th\r\n            'M9': { notes: [0, 4, 7, 11, 14] }, // Major 9th\r\n            'm9': { notes: [0, 3, 7, 10, 14] }, // Minor 9th\r\n            '11': { notes: [0, 4, 7, 10, 14, 17] }, // Dominant 11th\r\n            '13': { notes: [0, 4, 7, 10, 14, 17, 21] }, // Dominant 13th\r\n            'add9': { notes: [0, 2, 4, 7] }, // Added 9th\r\n            'm6': { notes: [0, 3, 7, 9] }, // Minor 6th\r\n            '6': { notes: [0, 4, 7, 9] }, // Major 6th\r\n            '5': { notes: [0, 7] }, // Power chord\r\n            '6/9': { notes: [0, 4, 7, 9, 14] }, // Major 6/9\r\n            'm11': { notes: [0, 3, 7, 10, 17] }, // Minor 11\r\n            'M7#11': { notes: [0, 4, 7, 11, 18] }, // Major 7#11\r\n            'm7b5': { notes: [0, 3, 6, 10] }, // Half-Diminished\r\n\r\n            '/C': { notes: [0, 4, 7], root: 0}, // C Major\r\n            '/Cm': { notes: [0, 3, 7], root: 0}, // C Minor\r\n            '/C#': { notes: [0, 4, 7], root: 1}, // C# Major\r\n            '/C#m': { notes: [0, 3, 7], root: 1}, // C# Minor\r\n            '/D': { notes: [0, 4, 7], root: 2}, // D Major\r\n            '/Dm': { notes: [0, 3, 7], root: 2}, // D Minor\r\n            '/D#': { notes: [0, 4, 7], root: 3}, // D# Major\r\n            '/D#m': { notes: [0, 3, 7], root: 3}, // D# Minor\r\n            '/E': { notes: [0, 4, 7], root: 4}, // E Major\r\n            '/Em': { notes: [0, 3, 7], root: 4}, // E Minor\r\n            '/F': { notes: [0, 4, 7], root: 5}, // F Major\r\n            '/Fm': { notes: [0, 3, 7], root: 5}, // F Minor\r\n            '/F#': { notes: [0, 4, 7], root: 6}, // F# Major\r\n            '/F#m': { notes: [0, 3, 7], root: 6}, // F# Minor\r\n            '/G': { notes: [0, 4, 7], root: 7}, // G Major\r\n            '/Gm': { notes: [0, 3, 7], root: 7}, // G Minor\r\n            '/G#': { notes: [0, 4, 7], root: 8}, // G# Major\r\n            '/G#m': { notes: [0, 3, 7], root: 8}, // G# Minor\r\n            '/A': { notes: [0, 4, 7], root: 9}, // A Major\r\n            '/Am': { notes: [0, 3, 7], root: 9}, // A Minor\r\n            '/A#': { notes: [0, 4, 7], root: 10}, // A# Major\r\n            '/A#m': { notes: [0, 3, 7], root: 10}, // A# Minor\r\n            '/B': { notes: [0, 4, 7], root: 11}, // B Major\r\n            '/Bm': { notes: [0, 3, 7], root: 11} // B Minor\r\n            \r\n        };\r\n\r\n        this.generateChords();\r\n    }\r\n\r\n    generateChords() {\r\n        Object.entries(this.chordStructures).forEach(([suffix, structure]) => {\r\n            for (let i = 0; i < 12; i++) {\r\n                let rootNote = i\r\n                let customRoot = false\r\n                let notes = structure.notes.map(interval => (i + interval) % 12);\r\n                const chordName = `${this.noteNames[i]}${suffix}`;\r\n                if (structure.root !== undefined) {\r\n                    //Filter Dumb Chord Like C/C D/D\r\n                    if (structure.root == rootNote) {\r\n                        continue\r\n                    }\r\n                    rootNote = structure.root\r\n                    customRoot = true\r\n                    notes.push(rootNote)\r\n                }\r\n\r\n\r\n                this.chords.push(new Chord(rootNote, notes, chordName, customRoot));\r\n            }\r\n        });\r\n    }\r\n\r\n    searchChords(noteArray, rootNote, threshold = 50) {\r\n        console.log(\"Searching Chords...\")\r\n        const results = [];\r\n        noteArray = noteArray.map(note => note % 12); // Normalize notes to be within octave\r\n        if (rootNote) {\r\n            rootNote = rootNote % 12\r\n\r\n        }\r\n\r\n        this.chords.forEach(chord => {\r\n            let chordNotes = [...chord.notes];\r\n\r\n            console.log(\"Comparing to: \" + chord.name)\r\n            //Add the Root note to the Chords For Cases like A/D\r\n            const inputNotesSet = new Set(noteArray);\r\n            console.log(\"Input Notes Set: \", inputNotesSet);\r\n\r\n            const commonNotes = new Set([...chordNotes].filter(note => inputNotesSet.has(note)));\r\n            console.log(\"Common Notes with Chord: \", commonNotes);\r\n\r\n            const totalUniqueNotes = new Set([...chordNotes, ...noteArray]);\r\n            console.log(\"Total Unique Notes: \", totalUniqueNotes);\r\n\r\n\r\n            let matchPercentage = (commonNotes.size / totalUniqueNotes.size) * 100;\r\n            console.log(\"Searched Root: \" + rootNote + \" Presen Root: \" + chord.rootNote);\r\n\r\n            // Adjusting match percentage based on root note comparison\r\n            if (rootNote !== null) {\r\n                if (chord.rootNote == rootNote) {\r\n                    console.log(\"Matching Root for: \" + chord.name + \" Root: \" + chord.rootNote + \" Notes: \" + chordNotes)\r\n                    // If root notes match, this is fine as calculated\r\n                } else {\r\n                    // Penalize the match percentage slightly if root notes don't match\r\n                    matchPercentage *= 0.85; // Penalize by 10%\r\n                    console.log(\"Panelized for not matching Root\")\r\n                }\r\n            } else {\r\n                //If a Custom Root in the CHord Details is specified but the user hasnt put a custom root\r\n                if (chord.customRoot == true) {\r\n                    matchPercentage *= 0.85; // Penalize by 10%\r\n                    console.log(\"Panelized For Havinng Specific when it shouldnt\")\r\n\r\n                }\r\n            }\r\n\r\n\r\n\r\n            if (matchPercentage >= threshold) {\r\n                results.push({\r\n                    name: chord.name,\r\n                    probability: parseFloat(matchPercentage.toFixed(2))\r\n                });\r\n            }\r\n        });\r\n\r\n        // Sort results by probability in descending order\r\n        return results.sort((a, b) => b.probability - a.probability);\r\n    }\r\n\r\n    getAllChords() {\r\n        // Return all chord names in a simplified object format\r\n        return this.chords.map(chord => ({ name: chord.name }));\r\n    }\r\n\r\n    getChordByName(name) {\r\n        const chord = this.chords.find(chord => chord.name === name);\r\n        if (chord) {\r\n            console.log('Chord found:', chord);\r\n            return chord;\r\n        } else {\r\n            console.log('No chord found with the name:', name);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport { Chord, ChordLibrary };"],"names":["$8be3ff24c5619c64$export$2e2bcd8739ae039","constructor","items","dropzoneId","itemsContainer","itemSearch","selectedItems","emptyMessage","idCounter","emptyMessageContainer","document","getElementById","selectedItemsContainer","itemFilterInput","displayArray","createElement","id","body","appendChild","selectedItemsArray","addEventListeners","populateItemsList","emptyMessageElement","words","split","baseElement","createItemElement","draggable","isSelectable","forEach","word","clone","cloneNode","innerHTML","window","addEventListener","handleWindowDragOver","bind","handleWindowDrop","allowDrop","handleDropOnContainer","filterItems","e","event","target","preventDefault","item","itemElement","textContent","name","className","undefined","probability","probabilitySpan","style","backgroundColor","getBackgroundColor","boxShadow","addSelectedItem","endColor","adjustedProbability","Math","log10","max","min","blendedColor","startColor","map","component","index","round","join","createSelectedItemElement","selectedItemElement","handleDragStart","handleDragOver","handleDropReorder","handleDragEnd","handleDragLeave","removeSelectedItem","remove","updateArray","push","updateDisplayArray","ceateAndInsertElement","element","updateItems","newItems","console","log","clearList","firstChild","removeChild","handleDropOnItemList","event1","droppedItemId","dataTransfer","getData","droppedItemElement","classList","contains","setData","add","targetElement","closest","insertAtCorrectPosition","newClone","overItems","querySelectorAll","droppedIndex","Array","from","children","indexOf","after","before","el","length","parentNode","filterValue","value","toUpperCase","itemElements","itemText","display","includes","getArray","$15f7e4e804ddc0ff$export$2e2bcd8739ae039","containerSelector","options","container","querySelector","updatePlayedNotesDebounced","debounce","updatePlayedNotes","octaves","playedNotes","rootNote","layout","keysPerOctave","whiteKeyCount","filter","x","whiteKeyWidth","blackKeyWidth","blackKeyHeight","totalKeys","createPiano","addKeyListeners","whiteCounter","key","setAttribute","left","width","height","boxSizing","position","note","getAttribute","n","setRootNote","stopPropagation","func","delay","timeoutId","args","clearTimeout","setTimeout","apply","CustomEvent","detail","notes","dispatchEvent","clearPiano","setOctaves","newOctaves","$ba3f5238df4b6dab$export$3aefe856cf647baf","customRoot","$ba3f5238df4b6dab$export$b629fc3c71676d49","chords","noteNames","chordStructures","root","generateChords","Object","entries","suffix","structure","i","interval","chordName","searchChords","noteArray","threshold","results","chord","chordNotes","inputNotesSet","Set","commonNotes","has","totalUniqueNotes","matchPercentage","size","parseFloat","toFixed","sort","a","b","getAllChords","getChordByName","find","calculateOctaves","screenWidth","innerWidth","sqrt","ceil","myPiano","chordLibrary","allChordLibraryItems","dragAndDropList","onresize"],"version":3,"file":"index.84e6249a.js.map"}